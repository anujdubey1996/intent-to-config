
Here are some examples of Kubernetes deployment configurations based on intent:

Intent: Unknown Intent
Configuration:
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: neptune-10ab
  name: neptune-10ab
  namespace: neptune
spec:
  replicas: 3
  selector:
    matchLabels:
      app: neptune-10ab
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: neptune-10ab
    spec:
      serviceAccountName: neptune-sa-v2
      containers:
      - image: httpd:2.4-alpine
        name: neptune-pod-10ab
        resources:
          requests:
            memory: 20Mi
          limits:
            memory: 50Mi

status: {}


Intent: Define a Kubernetes deployment for a container running the lalyos/12factor image with environment variables sourced from a secret.
Configuration:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: geolocationdb
  labels:
    app: geolocationdb
spec:
  selector:
    matchLabels:
      app: geolocationdb
  replicas: 1
  template:
    metadata:
      labels:
        app: geolocationdb
    spec:
      containers:
      - name: geolocationdb
        image: vprofile/vprofiledb:V1
        args:
         - "--ignore-db-dir=lost+found"
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: geolo-db-data
        ports:
        - name: geolo-port
          containerPort: 3306
        env:
         - name: MYSQL_ROOT_PASSWORD
           valueFrom:
             secretKeyRef:
               name: app-secret
               key: db-pass
      nodeSelector:
        zone: us-east-1a
      volumes:
        - name: geolo-db-data
          # This AWS EBS volume must already exist.
          awsElasticBlockStore:
             volumeID: vol-0343110a53e1a3eaf
             fsType: ext4


Intent: Deploy a containerized application with specific environment variables. The deployment configuration specifies a single container using an image built from a Dockerfile and sets various environment variables.
Configuration:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dp
  namespace: own
spec: 
  replicas: 2
  strategy: 
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  minReadySeconds: 30
  selector:
    matchLabels:
      app: java
  template:
    metadata: 
     name: tmp
     labels:
       app: java
    spec:
      containers:
      - name: con
        image: 637423476845.dkr.ecr.ap-south-1.amazonaws.com/ecs:test
        ports:
        - containerPort: 8080



Intent: Create a Kubernetes Deployment for a Redis instance with a single replica. The deployment configures resource requests and limits for the Redis container and exposes the default Redis port
Configuration:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: currencyservice
spec:
  selector:
    matchLabels:
      app: currencyservice
  template:
    metadata:
      labels:
        app: currencyservice
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      containers:
        - name: server
          image: gcr.io/google-samples/microservices-demo/currencyservice:v0.3.6
          ports:
            - name: grpc
              containerPort: 7000
          env:
            - name: PORT
              value: "7000"
            - name: DISABLE_TRACING
              value: "1"
            - name: DISABLE_PROFILER
              value: "1"
            - name: DISABLE_DEBUGGER
              value: "1"
          readinessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:7000"]
          livenessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:7000"]
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              cpu: 200m
              memory: 128Mi


Intent: Deploy the cert-controller in a Kubernetes cluster when the certController is to be created and the certManager is not enabled for the webhook
Configuration:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: stash-demo
  namespace: demo
  labels:
    app: stash-demo
  # This annotations indicates that data should be recovered on each restart of the workload
  annotations:
    stash.appscode.com/restorepolicy: "OnRestart"
    stash.appscode.com/repository: "demo-backup-repo"
    stash.appscode.com/directories: "[/source/data]"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: stash-demo
  template:
    metadata:
      labels:
        app: stash-demo
      name: busybox
    spec:
      containers:
      - args:
        - sleep
        - "3600"
        image: busybox
        imagePullPolicy: IfNotPresent
        name: busybox
        volumeMounts:
        - mountPath: /source/data
          name: source-data
      restartPolicy: Always
      volumes:
      - name: source-data
        configMap:
          name: stash-sample-data


Now, based on the following intent, generate the corresponding Kubernetes deployment configuration:

Intent: Configure and execute a test scenario for Kubernetes deployment with performance measurements, including pod startup latency, deployment creation, and pod deletion.

Configuration:
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: performance-test
  labels:
    app: performance-test
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: performance-test
  template:
    metadata:
      labels:
        app: performance-test
    spec:
      serviceAccountName: default
      containers:
        - name: test-container
          image: alpine:3.16
          command: ["sleep", "2000"]
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
          env:
            - name: STARTUP_LATENCY_METRIC
              value: "startup-latency"
            - name: DEPLOYMENT_LATENCY_METRIC
              value: "deployment-create"
            - name: POD_LATENCY_METRIC
              value: "pod-delete"
          containers:
          - name: prometheus-exporter
            image: prom/node-exporter:v0.20.0
            command:
              - /bin/ash
              - -c
              - "node_exporter -collector.logging-prometheus=true --web.listen-address :8080 --path=/metrics"
            port: 8080
          volumes:
            - name: metrics-volume
              emptyDir: {}
          terminationGracePeriodSeconds: 10
      dnsPolicy: ClusterFirst
      hostNetwork: true
      containers:
        - name: log-collector
          image: logzio/kubectl-forwarder:1.2
          command:
            - logzio-kubectl-forwarder
            - --address=tcp://logzio.io:5005
            - --port=8080
          volumeMounts:
            - name: logzio-key
              secret:
                defaultMode: 200
                optional: true
                name: logzio-key
          volumeMounts:
            - name: metrics-volume
              mountPath: /metrics
          hostNetwork: true
          terminationGracePeriodSeconds: 10
      terminationGracePeriodSeconds: 10
```

Explanation:

* Kind: Deployment - Deploys a set of replicated Pods and a ReplicaSet that manages them.
* Replicas: 3 - Number of pods to be replicated for this deployment.
* Strategy:
  * Type: RollingUpdate - An update strategy applied to the Deployment.
  * RollingUpdate:
    * MaxSurge: 1 - The maximum number of Pods that can be created above the defined replicas when a deployment is scaled or updated.
    * MaxUnavailable: 0 - The maximum number of Pods that can be unavailable when a deployment is being updated.
* Selector: The label selector for selecting Pods that belong to this replica set.
* Template: Contains the definition of the exact pods that should be created.
* Metadata: Pod metadata (labels, annotations).
* Spec: Pod definition specification.
* ServiceAccountName: The service account to use for this container.
* Containers: Defines the container that should be in the pod.
* Command: The command that gets executed in the container when it starts.
* ReadinessProbe: Used to verify whether the container is ready to start accepting traffic. Here, we use an HTTP GET request to check the "/healthz" endpoint.
* Env: Environment variables passed to the container.
* Prometheus-exporter: Adds a Container that deploys the Prometheus exporter to collect metrics on node resources.
* Volumes: Volume(s) that are shared across containers. In this case, we create a volume to collect the metrics for Prometheus exporter named "metrics-volume".
* DNSPolicy: ClusterFirst - Ensure that all communication to services in this Pod goes through the Kubernetes Service rather than directly to the service's endpoints.
* HostNetwork: true - Allows the pod to use the host's IP instead of the Kubernetes-allocated IP.
* Containers: Add another container named "log-collector" to send container logs to Logzio.
* HostNetwork: true - Allows the log-collector container to use the host's IP instead of the Kubernetes-allocated IP.
* TerminationGracePeriodSeconds: Grace period for terminating a container before it is considered terminated. The value is specified in seconds. Here, we set the termination grace period to 10 seconds for both the test-container and log-collector container.