
Here are some examples of Kubernetes deployment configurations based on intent:

Intent: Unknown Intent
Configuration:
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: neptune-10ab
  name: neptune-10ab
  namespace: neptune
spec:
  replicas: 3
  selector:
    matchLabels:
      app: neptune-10ab
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: neptune-10ab
    spec:
      serviceAccountName: neptune-sa-v2
      containers:
      - image: httpd:2.4-alpine
        name: neptune-pod-10ab
        resources:
          requests:
            memory: 20Mi
          limits:
            memory: 50Mi

status: {}


Intent: Define a Kubernetes deployment for a container running the lalyos/12factor image with environment variables sourced from a secret.
Configuration:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: geolocationdb
  labels:
    app: geolocationdb
spec:
  selector:
    matchLabels:
      app: geolocationdb
  replicas: 1
  template:
    metadata:
      labels:
        app: geolocationdb
    spec:
      containers:
      - name: geolocationdb
        image: vprofile/vprofiledb:V1
        args:
         - "--ignore-db-dir=lost+found"
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: geolo-db-data
        ports:
        - name: geolo-port
          containerPort: 3306
        env:
         - name: MYSQL_ROOT_PASSWORD
           valueFrom:
             secretKeyRef:
               name: app-secret
               key: db-pass
      nodeSelector:
        zone: us-east-1a
      volumes:
        - name: geolo-db-data
          # This AWS EBS volume must already exist.
          awsElasticBlockStore:
             volumeID: vol-0343110a53e1a3eaf
             fsType: ext4


Intent: Deploy a containerized application with specific environment variables. The deployment configuration specifies a single container using an image built from a Dockerfile and sets various environment variables.
Configuration:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dp
  namespace: own
spec: 
  replicas: 2
  strategy: 
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  minReadySeconds: 30
  selector:
    matchLabels:
      app: java
  template:
    metadata: 
     name: tmp
     labels:
       app: java
    spec:
      containers:
      - name: con
        image: 637423476845.dkr.ecr.ap-south-1.amazonaws.com/ecs:test
        ports:
        - containerPort: 8080



Intent: Create a Kubernetes Deployment for a Redis instance with a single replica. The deployment configures resource requests and limits for the Redis container and exposes the default Redis port
Configuration:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: currencyservice
spec:
  selector:
    matchLabels:
      app: currencyservice
  template:
    metadata:
      labels:
        app: currencyservice
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      containers:
        - name: server
          image: gcr.io/google-samples/microservices-demo/currencyservice:v0.3.6
          ports:
            - name: grpc
              containerPort: 7000
          env:
            - name: PORT
              value: "7000"
            - name: DISABLE_TRACING
              value: "1"
            - name: DISABLE_PROFILER
              value: "1"
            - name: DISABLE_DEBUGGER
              value: "1"
          readinessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:7000"]
          livenessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:7000"]
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              cpu: 200m
              memory: 128Mi


Intent: Deploy the cert-controller in a Kubernetes cluster when the certController is to be created and the certManager is not enabled for the webhook
Configuration:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: stash-demo
  namespace: demo
  labels:
    app: stash-demo
  # This annotations indicates that data should be recovered on each restart of the workload
  annotations:
    stash.appscode.com/restorepolicy: "OnRestart"
    stash.appscode.com/repository: "demo-backup-repo"
    stash.appscode.com/directories: "[/source/data]"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: stash-demo
  template:
    metadata:
      labels:
        app: stash-demo
      name: busybox
    spec:
      containers:
      - args:
        - sleep
        - "3600"
        image: busybox
        imagePullPolicy: IfNotPresent
        name: busybox
        volumeMounts:
        - mountPath: /source/data
          name: source-data
      restartPolicy: Always
      volumes:
      - name: source-data
        configMap:
          name: stash-sample-data


Now, based on the following intent, generate the corresponding Kubernetes deployment configuration:

Intent: Create and manage a deployment for the auth-server application
The auth-server application is a containerized application based on the official NodeJS Alpine image with environment variables sourced from a secret
The desired number of replicas for the deployment is 3
The auth-server will expose the default NodeJS port (3000)
The deployment will have a strategy of rolling update with a maximum unavailability of 1 and a maximum surge of 2
The deployment will be targeted to a specific node with label "authserver-node"

Configuration:
```yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-server
spec:
  selector:
    matchLabels:
      app: auth-server
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  template:
    metadata:
      labels:
        app: auth-server
    spec:
      containers:
      - name: auth-server
        image: node:14-alpine
        ports:
        - containerPort: 3000
        env:
         - name: NODE_ENV
           valueFrom:
             secretKeyRef:
               name: auth-server-secrets
               key: AUTH_SECRET_NODE_ENV
        nodeSelector:
          authserver-node: true
```

In this configuration, the `Deployment` object is used to manage the auth-server. The desired number of replicas is set to 3. The deployment will follow a `RollingUpdate` strategy, which means when new pods are created, a maximum of 1 pod can be unavailable at any given time, and there is a maximum surge of 2 new pods during the update process. The NodeJS container is used with image `node:14-alpine`, and the default NodeJS port (3000) is exposed. The environment variables are sourced from a secret named `auth-server-secrets` and the `AUTH_SECRET_NODE_ENV` key. The node selector ensures that the pods will only run on nodes with the label `authserver-node`.

As with all Kubernetes configurations, ensure to replace the necessary placeholder values to suit your specific environment, such as the name of the actual secret and the label value for your specific node.