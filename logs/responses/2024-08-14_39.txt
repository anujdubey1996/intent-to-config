
Create a Kubernetes deployment workload configuration file based on the provided intent.

Intent: Create a Kubernetes Deployment with a rolling update strategy to manage deployment of a containerized application. The deployment specifies 3 replicas and utilizes a rolling update strategy to manage updates with defined surge and availability constraints.

YAML File:
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app-deployment
  labels:
    app: my-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      containers:
      - name: my-app-container
        image: my-app-image
        ports:
        - containerPort: 80
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: 1
          maxSurge: 2
        type: RollingUpdate

```

Explanation:

- `apiVersion` and `kind` specify the API version and kind of the resource being created, in this case a Kubernetes Deployment.
- `metadata` contains the metadata for the deployment, including the name and labels. In this case, the labels help to identify the deployment as related to the application `my-app`.
- `spec` contains the specifics for the deployment, including the number of replicas (3 in this case), the Selector that selects the Pods that belong to the deployment, and the template for defining the container and strategies used for updates.
- The template section defines the metadata and spec for the container, including `name`, `image`, and `ports`. In this case, the container is called `my-app-container`, uses the image `my-app-image`, and listens on port 80.
- The `strategy` section defines the strategy for updating the deployment. In this case, a `RollingUpdate` strategy is used, which provides options to manage updates with defined surge and availability constraints. The `maxUnavailable` field limits the number of replicas that can become unavailable during an update to 1, ensuring that at least one replica remains available. The `maxSurge` field defines the maximum number of replicas beyond the desired number that can be created during an update to 2. This allows for up to 2 more replicas to be created during the update, providing some flexibility for the update process.