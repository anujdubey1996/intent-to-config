
Here are some examples of Kubernetes deployment configurations based on intent:

Intent: Unknown Intent
Configuration:
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: neptune-10ab
  name: neptune-10ab
  namespace: neptune
spec:
  replicas: 3
  selector:
    matchLabels:
      app: neptune-10ab
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: neptune-10ab
    spec:
      serviceAccountName: neptune-sa-v2
      containers:
      - image: httpd:2.4-alpine
        name: neptune-pod-10ab
        resources:
          requests:
            memory: 20Mi
          limits:
            memory: 50Mi

status: {}


Intent: Define a Kubernetes deployment for a container running the lalyos/12factor image with environment variables sourced from a secret.
Configuration:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: geolocationdb
  labels:
    app: geolocationdb
spec:
  selector:
    matchLabels:
      app: geolocationdb
  replicas: 1
  template:
    metadata:
      labels:
        app: geolocationdb
    spec:
      containers:
      - name: geolocationdb
        image: vprofile/vprofiledb:V1
        args:
         - "--ignore-db-dir=lost+found"
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: geolo-db-data
        ports:
        - name: geolo-port
          containerPort: 3306
        env:
         - name: MYSQL_ROOT_PASSWORD
           valueFrom:
             secretKeyRef:
               name: app-secret
               key: db-pass
      nodeSelector:
        zone: us-east-1a
      volumes:
        - name: geolo-db-data
          # This AWS EBS volume must already exist.
          awsElasticBlockStore:
             volumeID: vol-0343110a53e1a3eaf
             fsType: ext4


Intent: Deploy a containerized application with specific environment variables. The deployment configuration specifies a single container using an image built from a Dockerfile and sets various environment variables.
Configuration:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dp
  namespace: own
spec: 
  replicas: 2
  strategy: 
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  minReadySeconds: 30
  selector:
    matchLabels:
      app: java
  template:
    metadata: 
     name: tmp
     labels:
       app: java
    spec:
      containers:
      - name: con
        image: 637423476845.dkr.ecr.ap-south-1.amazonaws.com/ecs:test
        ports:
        - containerPort: 8080



Intent: Create a Kubernetes Deployment for a Redis instance with a single replica. The deployment configures resource requests and limits for the Redis container and exposes the default Redis port
Configuration:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: currencyservice
spec:
  selector:
    matchLabels:
      app: currencyservice
  template:
    metadata:
      labels:
        app: currencyservice
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 5
      containers:
        - name: server
          image: gcr.io/google-samples/microservices-demo/currencyservice:v0.3.6
          ports:
            - name: grpc
              containerPort: 7000
          env:
            - name: PORT
              value: "7000"
            - name: DISABLE_TRACING
              value: "1"
            - name: DISABLE_PROFILER
              value: "1"
            - name: DISABLE_DEBUGGER
              value: "1"
          readinessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:7000"]
          livenessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:7000"]
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              cpu: 200m
              memory: 128Mi


Intent: Deploy the cert-controller in a Kubernetes cluster when the certController is to be created and the certManager is not enabled for the webhook
Configuration:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: stash-demo
  namespace: demo
  labels:
    app: stash-demo
  # This annotations indicates that data should be recovered on each restart of the workload
  annotations:
    stash.appscode.com/restorepolicy: "OnRestart"
    stash.appscode.com/repository: "demo-backup-repo"
    stash.appscode.com/directories: "[/source/data]"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: stash-demo
  template:
    metadata:
      labels:
        app: stash-demo
      name: busybox
    spec:
      containers:
      - args:
        - sleep
        - "3600"
        image: busybox
        imagePullPolicy: IfNotPresent
        name: busybox
        volumeMounts:
        - mountPath: /source/data
          name: source-data
      restartPolicy: Always
      volumes:
      - name: source-data
        configMap:
          name: stash-sample-data


Now, based on the following intent, generate the corresponding Kubernetes deployment configuration:

Intent: Create Kubernetes Deployments for various Airbyte components with specific configurations for container resource limits and environment variables.
Configuration:

apiVersion: apps/v1
kind: Deployment
metadata:
  name: airbyte-docker
  namespace: airbyte
spec:
  selector:
    matchLabels:
      app: airbyte-docker
  template:
    metadata:
      labels:
        app: airbyte-docker
    spec:
      NodeSelector:
        node-role.kubernetes.io/worker: true
      containers:
      - name: airbyte-api-server
        image: airbyte/airbyte-api-server:latest
        ports:
        - containerPort: 8080
        env:
          - name: AIRBYTE_API_KEY
            value: secret/airbyteAPIToken
          - name: HOST_NAME
            value: airbyte-api-server
          - name: DB_URI
            value: postgres://postgres:password@postgres-cluster.airbyte-postgres.svc.cluster.local/airbyte
      resources: # Container resources (Limits, requests)
        limits:
          memory: "512Mi"
          cpu: "2"
        requests:
          memory: "256Mi"
          cpu: "1"

apiVersion: apps/v1
kind: Deployment
metadata:
  name: airbyte-worker
  namespace: airbyte
spec:
  selector:
    matchLabels:
      app: airbyte-worker
  template:
    metadata:
      labels:
        app: airbyte-worker
    spec:
      NodeSelector:
        node-role.kubernetes.io/worker: true
      containers:
      - name: airbyte-worker
        image: airbyte/airbyte-worker:latest
        env:
          - name: AIRBYTE_API_KEY
            value: secret/airbyteAPIToken
          - name: JOB_ID
            value: your-job-id
          - name: DB_URI
            value: postgres://postgres:password@postgres-cluster.airbyte-postgres.svc.cluster.local/airbyte
      resources:  # Container resources (Limits, requests)
        limits:
          memory: "512Mi"
          cpu: "2"
        requests:
          memory: "256Mi"
          cpu: "1"

apiVersion: apps/v1
kind: Deployment
metadata:
  name: airbyte-postgres
  namespace: airbyte
spec:
  selector:
    matchLabels:
      app: airbyte-postgres
  template:
    metadata:
      labels:
        app: airbyte-postgres
    spec:
      containers:
      - name: airbyte-postgres
        image: postgres:12
        env:
          - name: POSTGRES_USER
            value: postgres
          - name: POSTGRES_PASSWORD
            value: password
        volumeClaimTemplate:
          storageClassName: standard
          resources:
            requests:
              storage: 10Gi
        ports:
        - containerPort: 5432

apiVersion: apps/v1
kind: Deployment
metadata:
  name: airbyte-monitoring
  namespace: airbyte
spec:
  selector:
    matchLabels:
      app: airbyte-monitoring
  template:
    metadata:
      labels:
        app: airbyte-monitoring
    spec:
      containers:
      - name: airbyte-monitoring
        image: prom/kubernetes-prometheus-operator:latest
        env:
          - name: K8S_PROMETHEUS_PROTESTER_E2E_K8S_PROVIDER
            value: "kubernetes"
        ports:
        - containerPort: 9090
        - containerPort: 30800
        arguments:
          - --component-config-file=-
      volumeClaimTemplate:
        storageClassName: standard
        resources:
          requests:
            storage: 10Gi


Here's the Kubernetes deployment configuration for the Airbyte components, as per the provided intent:

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: airbyte-docker
  namespace: airbyte
spec:
  selector:
    matchLabels:
      app: airbyte-docker
  replicas: 1
  template:
    metadata:
      labels:
        app: airbyte-docker
    spec:
      NodeSelector:
        node-role.kubernetes.io/worker: true
      containers:
      - name: airbyte-api-server
        image: airbyte/airbyte-api-server:latest
        ports:
        - containerPort: 8080
        env:
          - name: AIRBYTE_API_KEY
            valueFrom:
              secretKeyRef:
                name: airbyte-apitoken
                key: apiToken
          - name: HOST_NAME
            value: airbyte-api-server
          - name: DB_URI
            valueFrom:
              configMapKeyRef:
                name: airbyte-postgres-data
                key: db-uri
      resources: # Container resources (Limits, requests)
        limits:
          memory: "512Mi"
          cpu: "2"
        requests:
          memory: "256Mi"
          cpu: "1"
status: {}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: airbyte-worker
  namespace: airbyte
spec:
  selector:
    matchLabels:
      app: airbyte-worker
  replicas: 1
  template:
    metadata:
      labels:
        app: airbyte-worker
    spec:
      NodeSelector:
        node-role.kubernetes.io/worker: true
      containers:
      - name: airbyte-worker
        image: airbyte/airbyte-worker:latest
        env:
          - name: AIRBYTE_API_KEY
            valueFrom:
              secretKeyRef:
                name: airbyte-apitoken
                key: apiToken
          - name: JOB_ID
            value: your-job-id
          - name: DB_URI
            valueFrom:
              configMapKeyRef:
                name: airbyte-postgres-data
                key: db-uri
      resources:  # Container resources (Limits, requests)
        limits:
          memory: "512Mi"
          cpu: "2"
        requests:
          memory: "256Mi"
          cpu: "1"
status: {}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: airbyte-postgres
  namespace: airbyte
spec:
  selector:
    matchLabels:
      app: airbyte-postgres
  replicas: 1
  template:
    metadata:
      labels:
        app: airbyte-postgres
    spec:
      containers:
      - name: airbyte-postgres
        image: postgres:12
        env:
          - name: POSTGRES_USER
            value: postgres
          - name: POSTGRES_PASSWORD
            value: password
        volumeClaimTemplate:
          storageClassName: standard
          resources:
            requests:
              storage: 10Gi
        ports:
        - containerPort: 5432
status: {}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: airbyte-monitoring
  namespace: airbyte
spec:
  selector:
    matchLabels:
      app: airbyte-monitoring
  replicas: 1
  template:
    metadata:
      labels:
        app: airbyte-monitoring
    spec:
      containers:
      - name: airbyte-monitoring
        image: prom/kubernetes-prometheus-operator:latest
        env:
          - name: K8S_PROMETHEUS_PROTESTER_E2E_K8S_PROVIDER
            value: "kubernetes"
        ports:
        - containerPort: 9090
        - containerPort: 30800
        arguments:
          - --component-config-file=-
        volumeClaimTemplate:
          storageClassName: standard
          resources:
            requests:
              storage: 10Gi
status: {}
```

This Kubernetes deployment configuration creates four airbyte components, namely `airbyte-docker`, `airbyte-worker`, `airbyte-postgres`, and `airbyte-monitoring` in the specified namespace. It deploys one instance of each container with specific requirements for CPU and memory limits and requests. Furthermore, it sets environment variables for connecting to the airbyte-postgres instance based on secrets and configuration maps.