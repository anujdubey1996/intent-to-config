apiVersion: v1
kind: HelmRelease
metadata:
  name: {{ .Release.Name }} # Set the release_name
  namespace: {{ .Release.Namespace }} # Set the target namespace
spec:
  replicas: 3 # Adjust the number of replicas
  selector:
    matchLabels:
      app: myapp # Set the app label for the deployment
  template:
    metadata:
      labels:
        app: myapp # Set the deployment label
    spec:
      serviceAccount: myapp-service-account # Set the service account for this deployment
      service:
        type: LoadBalancer # Set the type of service exposed by the deployment
        selector:
          app: myapp # Select the deployed service based on the app label
        ports:
          # Expose the custom port as specified by the helm chart
          - port: {{ .Values.port }}
            targetPort: {{ .Values.targetPort }}
        externalTrafficPolicy: "ClusterIP" # Set external traffic policy
        ingress:
          # Use an external Ingress resource with dynamic rules based on the chart
          {{ if and (not .Values.ingress.enabled) (not .Values.ingress.external) }}
            # No Ingress defined
          {{ else if .Values.ingress.enabled }}
            # If enabled, create an Ingress resource with defined rules
            - name: {{ .Values.ingress.name }}
              tls:
                # Enable HTTPS (SSL) for Ingress, and include issued Let's Encrypt certificates for the specified domain(s)
                secretName: {{ .Values.ingress.tlsSecretName }}
                hosts:
                {{ range $domain := .Values.ingress.hosts }}
                  - {{ $domain }}
                {{ end }}
              rules:
                # Ingress rules to map incoming traffic to the appropriate service
                - host: {{ $domain }}
                  http:
                    paths:
                    {{ range $path := .Values.ingress.http.paths }}
                      path: {{ $path.path }}
                      backend:
                        serviceName: {{ .Values.serviceName }}
                        servicePort: {{ .Values.servicePort }}
                    {{ end }}
          {{ end }}
      containers:
        # Define the container for the deployment configuration
        - name: myapp-container
          image: {{ .Values.image }} # Set the container image
          imagePullPolicy: {{ .Values.imagePullPolicy }} # Set the container image pull policy
          ports:
            - containerPort: {{ .Values.port }} # Set the container port
          env:
            # Set environment variables for the container
            {{ range $key, $value := .Values.env }}
            - name: {{ $key }}
              value: "{{ $value }}"
            {{ end }}
      volumeClaimTemplates:
        # Define dynamic PersistentVolumeClaims based on number of replicas
        {{ range $index := .Values.volumes.persistentVolumeClaim.selector}}
          - metadata:
              labels:
                app: myapp
                storageclass: {{ .Values.volumes.persistentVolumeClaim.storageClass }}
            spec:
              accessModes: [{{- $volumeAccessModes := index .Values.volumes.persistentVolumeClaim.accessMode [0] }}]
              resources:
                requests:
                  storage: {{ $volumeSize := index .Values.volumes.persistentVolumeClaim.storageSize [$index - 1] }}
              selector:
                matchLabels:
                  app: myapp
                  accessMode: "{ { $volumeAccessModes }} "
        {{ end }}