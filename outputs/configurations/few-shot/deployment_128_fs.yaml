apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  labels:
    app: {{ .Release.Name }}
    release: {{ .Release.Name }}
    chart: {{ .Chart }}
    appVer: {{ .Values.appVersion }}
  annotations:
    {{- if .Values.annotations }}
    {{ toYaml .Values.annotations | yamlToJson | jsonToYaml | nindent 8 }}
    {{- end }}
  namespace: {{ .Values.namespace }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      {{- include "my_chart.labels" . | nindent 10 }}
  strategy:
    type: {{ .Values.deploymentStrategy.type }}
    rollingUpdate:
      {{- if .Values.deploymentStrategy.rollingUpdate }}
      {{- with .Values.deploymentStrategy.rollingUpdate }}
      maxUnavailable: {{ .maxUnavailable }}
      maxSurge: {{ .maxSurge }}
      {{- end }}
    {{- end }}

  template:
    metadata:
      labels:
        {{- include "my_chart.labels" . | nindent 10 }}
      annotations:
        {{- if .Values.podAnnotations }}
        {{ toYaml .Values.podAnnotations | yamlToJson | jsonToYaml | nindent 12 }}
        {{- end }}
      creationTimestamp: null
    spec:
      serviceAccountName: {{ .Values.serviceAccount.name }}
      securityContext:
        {{- if .Values.securityContext }}
        {{ toYaml .Values.securityContext | yamlToJson | jsonToYaml | nindent 12 }}
        {{- end }}
      {{- if .Values.containers }}
      containers:
      {{- range .Values.containers }}
      - name: {{ .name }}
        image: {{ .image }}
        {{- if .imagePullPolicy }}
        imagePullPolicy: {{ .imagePullPolicy }}
        {{- end }}
        ports:
        {{- if .ports }}
        {{- range .ports }}
        - name: {{ .name }}
          containerPort: {{ .containerPort }}
          {{- if .hostPort }}
          hostPort: {{ .hostPort }}
          {{- end }}
          {{- if .protocol }}
          protocol: {{ .protocol }}
          {{- end }}
        {{- end }}
        {{- end }}
        {{- if .command }}
        command:
        {{- range .command }}
        - {{ . }}
        {{- end }}
        {{- end }}
        {{- if .args }}
        args:
        {{- range .args }}
        - {{ . }}
        {{- end }}
        {{- end }}
        {{- if .volumeMounts }}
        volumeMounts:
        {{- range .volumeMounts }}
        - name: {{ .name }}
          mountPath: {{ .mountPath }}
          {{- if .subPath }}
          subPath: {{ .subPath }}
          {{- end }}
          {{- if .readOnly }}
          readOnly: true
          {{- end }}
        {{- end }}
        {{- end }}
        {{- if .env }}
        env:
        {{- range .env }}
        - name: {{ .name }}
          value: {{ .value }}
          {{- if .secretKeyRef }}
          secretKeyRef:
            name: {{ .secretRef.name }}
            key: {{ .secretRef.key }}
          {{- end }}
        {{- end }}
        {{- end }}
        {{- if .envFrom }}
        envFrom:
        {{- range .envFrom }}
        {{- if .secretRef }}
        - secretRef:
          name: {{ .secretRef.name }}
        {{- elsif .configMapRef }}
        - configMapRef:
          name: {{ .configMapRef.name }}
        {{- elsif $.Index . 1 }}
        - secret:
          {{- range .secrets }}
          - name: {{ .name }}
          {{- if .secretName }}
          secretName: {{ .secretName }}
          {{- end }}
          {{- if .items }}
          {{- range .items }}
          - key: {{ .name }}
          value: "{{ .value }}"
          {{- end }}
          {{- if .items }}
          {{- range .items }}
          - key: {{ .name }}
          valueFrom:
            secretKeyRef:
              name: {{ .secretKeyRef.name }}
              key: {{ .secretKeyRef.key }}
          {{- end }}
          {{- end }}
        {{- end }}
        {{- end }}
        lifecycle:
          preStop:
            exec:
              command:
              {{- if .preStopCommand }}
              - {{ .preStopCommand | printf "%s" - }}
              {{- end }}
        livenessProbe:
        readinessProbe:
          {{- if .readinessProbe }}
          {{- with .readinessProbe }}
          external:
          {{- if .external }}
          httpGet:
            {{- if .path }}
            path: {{ .path }}
            {{- end }}
            {{- if .port }}
            port: {{ .port }}
            {{- end }}
            {{- if .scheme }}
            scheme: {{ .scheme }}
            {{- end }}
          {{- end }}
          initialDelaySeconds: {{ .initialDelaySeconds }}
          periodSeconds: {{ .periodSeconds }}
          timeoutSeconds: {{ .timeoutSeconds }}
          {{- end }}
        resources:
          requests:
          {{- if .requestCpu }}
          cpu: "{{ .requestCpu }}"
          {{- end }}
          {{- if .requestMemory }}
          memory: "{{ .requestMemory }}"
          {{- end }}
          limits:
          {{- if .limitCpu }}
          cpu: "{{ .limitCpu }}"
          {{- end }}
          {{- if .limitMemory }}
          memory: "{{ .limitMemory }}"
          {{- end }}
      {{- end }}
      {{- end }}
      {{- if .volumes }}
      volumes:
      {{- range .volumes }}
      - name: {{ .name }}
      {{- if .configMap }}
      configMap:
        name: {{ .configMap.name }}
      {{- elsif .persistentVolumeClaim }}
      persistentVolumeClaim:
        claimName: {{ .persistentVolumeClaim.claimName }}
      {{- elsif .secret }}
      secret:
        secretName: {{ .secret.secretName }}
      {{- elsif .cbs }}
      cbs:
      {{- range .cbs }}
      - awsElasticBlockStore:
          fsType: {{ .fsType }}
          volumeID: {{ .volumeID }}
      {{- end }}
      {{- end }}
      {{- end }}
      terminationGracePeriodSeconds: 30